apply plugin: 'com.android.application'
apply plugin: 'jacoco'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "navdrawer.navdrawer.com.mynavdrawerapp"
        minSdkVersion 17
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }
    project.gradle.taskGraph.whenReady {
        connectedDebugAndroidTest {
            ignoreFailures = true
        }
    }
    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.+'
    implementation 'com.android.support:design:28.+'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    compile 'com.android.support:recyclerview-v7:28.+'
    compile 'com.android.support:cardview-v7:28.+'

    //ButterKnife

    compile 'com.jakewharton:butterknife:8.8.1'

    //RxJava2

    compile 'io.reactivex.rxjava2:rxjava:2.+'
    compile 'io.reactivex.rxjava2:rxandroid:2.+'

    //Retrofit
    compile 'com.squareup.retrofit2:retrofit:2.3.0'
    compile 'com.squareup.retrofit2:converter-gson:2.3.0'
    compile 'com.squareup.retrofit2:adapter-rxjava2:2.+'
    //Glide
    compile 'com.github.bumptech.glide:glide:3.+'

    //Dagger2
    compile 'com.google.dagger:dagger:2.14.1'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.14.1'

    testImplementation 'org.mockito:mockito-core:2.9.0'

    // Power Mock
    testImplementation 'org.powermock:powermock-api-mockito2:1.7.1'
    testImplementation 'org.powermock:powermock-module-junit4:1.7.1'
    testImplementation 'org.powermock:powermock-module-junit4-rule:1.7.1'
    testImplementation 'org.powermock:powermock-classloading-xstream:1.7.1'

    // Robolectric
    testImplementation 'org.robolectric:robolectric:3.8'
    testImplementation "org.robolectric:multidex:3.4.2"
    testImplementation "org.robolectric:shadows-supportv4:3.8"

    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'
}
task coverageReport(type: JacocoReport, dependsOn: 'testDebugUnitTest') {
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = files("${buildDir}/jacoco/testDebugUnitTest.exec")
}
